ObserverUiRuleSystem = {
	RulesForPlayer = {}
}

ObserverUiInitialization:AddInitializable(ObserverUiRuleSystem)

function ObserverUiRuleSystem:Initialize()
	for i=1, #PLAYERS do
		self:_InitializeDataStructure(PLAYERS[i].id.PlayerID)
	end
	
	if #PLAYERS == 2 then
		Rule_Add(_OneRuleToRingThemAll_TrackAlways)
	else
		Rule_AddInterval(_OneRuleToRingThemAll_OnlyTrackWhenUpdatingUi, 0.5)
	end
end

function ObserverUiRuleSystem:Reset()
	if #PLAYERS == 2 then
		Rule_Remove(_OneRuleToRingThemAll_TrackAlways)
	else
		Rule_Remove(_OneRuleToRingThemAll_OnlyTrackWhenUpdatingUi, 0.5)
	end
	
	self.RulesForPlayer = {}
	self.UpdateUiDataContexts = _DefaultFuncTable
	self.ApplyUiDataContexts = _DefaultFuncTable
end

function ObserverUiRuleSystem:Stop()
	if #PLAYERS == 2 then
		Rule_Pause(_OneRuleToRingThemAll_TrackAlways)
	else
		Rule_Pause(_OneRuleToRingThemAll_OnlyTrackWhenUpdatingUi, 0.5)
	end
end

function ObserverUiRuleSystem:Resume()
	if #PLAYERS == 2 then
		Rule_Unpause(_OneRuleToRingThemAll_TrackAlways)
	else
		Rule_Unpause(_OneRuleToRingThemAll_OnlyTrackWhenUpdatingUi, 0.5)
	end
end

function ObserverUiRuleSystem:AddSquadDataGatheringRule(playerId, squadType, rule)
	self:_AddRule(playerId, rule, "RulesForPlayer", playerId, "ForSquads", squadType)
end

function ObserverUiRuleSystem:AddEntityDataGatheringRule(playerId, entityType, rule)
	self:_AddRule(playerId, rule, "RulesForPlayer", playerId, "ForEntities", entityType)
end

function ObserverUiRuleSystem:AddDataGatheringPreparationRule(playerId, rule)
	self:_AddRule(playerId, rule, "RulesForPlayer", playerId, "ForPreparation")
end

function ObserverUiRuleSystem:AddDataProcessingRule(playerId, rule)
	self:_AddRule(playerId, rule, "RulesForPlayer", playerId, "ForProcessing")
end

function ObserverUiRuleSystem:AddUpdateUiDataContextForPlayerRule(playerId, rule)
	self:_AddRule(playerId, rule, "RulesForPlayer", playerId, "UpdateUiDataContextsForPlayer")
end

function ObserverUiRuleSystem:AddUpdateUiDataContextRule(rule)
	self:_AddRule(nil, rule, "UpdateUiDataContexts")
end

function ObserverUiRuleSystem:AddApplyUiDataContextRule(rule)
	self:_AddRule(nil, rule, "ApplyUiDataContexts")
end

function _NoOp() end
_DefaultFuncTable = { Func = _NoOp }
_DefaultFuncMt = { __index = function () return _DefaultFuncTable end}

function _OneRuleToRingThemAll_TrackAlways()
	local slot = World_GetGameTicks() & 7 --same as %8 but fast
	_OneRuleToRingThemAll(slot == 0 or slot == 4)
end

function _OneRuleToRingThemAll_OnlyTrackWhenUpdatingUi()
	_OneRuleToRingThemAll(true)
end

function _OneRuleToRingThemAll(updateUi)
	local self = ObserverUiRuleSystem
	
	for i=1, #PLAYERS do
		local player = PLAYERS[i].id
		local rulesForPlayer = self.RulesForPlayer[player.PlayerID]
		
		rulesForPlayer.ForPreparation.Func()
		SGroup_ForEach(Player_GetSquads(player), rulesForPlayer.RouterForSquads)
		EGroup_ForEach(Player_GetEntities(player), rulesForPlayer.RouterForEntities)
		rulesForPlayer.ForProcessing.Func()
		
		if updateUi then
			rulesForPlayer.UpdateUiDataContextsForPlayer.Func()
		end
	end
	
	if updateUi then
		self.UpdateUiDataContexts.Func()
		self.ApplyUiDataContexts.Func()
	end
end

function ObserverUiRuleSystem:_InitializeDataStructure(playerId)
	if not self.RulesForPlayer[playerId] then
		local forSquads = {}
		setmetatable(forSquads, _DefaultFuncMt)
		local forEntities = {}
		setmetatable(forEntities, _DefaultFuncMt)
		
		local squad_IsOfType = Squad_IsOfType
		local routerForSquads = function (group, index, squad)
			forSquads[""].Func(squad)
			if squad_IsOfType(squad, "worker") then
				forSquads.worker.Func(squad)
			else
				forSquads.NonWorker.Func(squad)
			end
		end
		local entity_IsOfType = Entity_IsOfType
		local entity_IsProductionQueueAvailable = Entity_IsProductionQueueAvailable
		local routerForEntities = function (group, index, entity)
			if entity_IsOfType(entity, "building") then
				forEntities.building.Func(entity)
				
				if entity_IsProductionQueueAvailable(entity) then
					forEntities.BuildingWithQueue.Func(entity)
				end
			end
		end
		
		self.RulesForPlayer[playerId] = { 
			ForSquads = forSquads, 
			ForEntities = forEntities,
			RouterForSquads = routerForSquads,
			RouterForEntities = routerForEntities,
			ForPreparation = _DefaultFuncTable,
			ForProcessing = _DefaultFuncTable,
			UpdateUiDataContextsForPlayer = _DefaultFuncTable
		} 
	end
end

function ObserverUiRuleSystem:_AddRule(playerId, rule, ...)
	if playerId then
		self:_InitializeDataStructure(playerId)
	end
	
	local args = {...}
	local argsSize = #args
	local targetParent = self
	for index = 1, argsSize - 1 do
		targetParent = targetParent[args[index]]
	end
	if targetParent[args[argsSize]].Func == _NoOp then
		targetParent[args[argsSize]] = { Func = rule }
		return
	end
	if not targetParent[args[argsSize]].Funcs then
		local funcs = { targetParent[args[argsSize]].Func, rule }
		targetParent[args[argsSize]].Funcs = funcs
		targetParent[args[argsSize]].Func = 
			function (p) 
				for i = 1, #funcs do funcs[i](p) end 
			end
		return
	end
	
	table.insert(targetParent[args[argsSize]].Funcs, rule) 
end