UiVictoryCountdowns = {}

ObserverUiInitialization:AddInitializable(UiVictoryCountdowns)

function UiVictoryCountdowns:Initialize()
	local playersByIndex = ObserverUIDataContextMappings.PlayersByIndex
	for p=1, #playersByIndex do
		playersByIndex[p].VictoryCountdownsContext = {}
		playersByIndex[p].IsWinning = false
	end
	
	local players = PLAYERS
	local timer_Exists = Timer_Exists
	local timer_GetRemaining = Timer_GetRemaining
	local tableInsert = table.insert
	local playersById = ObserverUIDataContextMappings.PlayersById
	local rule = function()
		
		for p=1, #players do
			playersByIndex[p].VictoryCountdownsContext = {}
			playersByIndex[p].IsWinning = false
			
			local wonder = players[p].AGS_Wonder
			if wonder and timer_Exists(wonder.objective_timer) then
				local victoryCountdown = { 
					TimeRemaining = timer_GetRemaining(wonder.objective_timer),
					Icon = "pack://application:,,,/WPFGUI;component/icons/races/common/victory_conditions/victory_condition_wonder.png",
					ClosestTo0 = false
				}
				tableInsert(playersByIndex[p].VictoryCountdownsContext, victoryCountdown)
			end
		end
		
	    if AGS_RELIGIOUS_TIMER and timer_Exists(AGS_RELIGIOUS_TIMER) then
			local victoryCountdown = { 
				TimeRemaining = timer_GetRemaining(AGS_RELIGIOUS_TIMER),
				Icon = "pack://application:,,,/WPFGUI;component/icons/races/common/victory_conditions/victory_condition_religious.png",
				ClosestTo0 = false
			}
			
			if AGS_RELIGIOUS_LAST_CAPTURER ~= nil then
				local lastCapturerPlayer = AGS_RELIGIOUS_LAST_CAPTURER.id
				if lastCapturerPlayer ~= nil then
					local lastCapturerId = lastCapturerPlayer.PlayerID
					if lastCapturerId ~= nil then
						tableInsert(playersById[lastCapturerId].VictoryCountdownsContext, 
								victoryCountdown) 
					end
				end
			end
	    end
		
		local leastTimeRemaining = nil
		local criticalVictoryCountdown = nil
		local winningTeam = nil
		for p=1, #players do
			local victoryCountdownsContext = playersByIndex[p].VictoryCountdownsContext
			for i=1, #victoryCountdownsContext do
				local victoryCountdown = victoryCountdownsContext[i]
				if not leastTimeRemaining or victoryCountdown.TimeRemaining < leastTimeRemaining then
					leastTimeRemaining = victoryCountdown.TimeRemaining
					criticalVictoryCountdown = victoryCountdown
					winningTeam = playersByIndex[p]
				end
			end
		end
		if criticalVictoryCountdown then
			criticalVictoryCountdown.ClosestTo0 = true
		end
		if winningTeam then
			winningTeam.IsWinning = true
		end
	end
	
	ObserverUiRuleSystem:AddUpdateUiDataContextRule(rule)
end
