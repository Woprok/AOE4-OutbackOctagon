import("ObserverUI/ObserverUiConstants.scar")

import("ObserverUI/ObserverUiInitialization.scar")

import("ObserverUI/ObserverUIRuleSystem.scar")

import("ObserverUI/ObserverUiMessageSystem.scar")
import("ObserverUI/Settings.scar")

import("ObserverUI/GameStateTracking/OnTributeSent.scar")
import("ObserverUI/Tracking_GameObjectRepository.scar")
import("ObserverUI/Tracking_TownCenterIdling.scar")
import("ObserverUI/Tracking_WorkerIdling.scar")
import("ObserverUI/Tracking_AgingUpProgress.scar")
import("ObserverUI/Tracking_AgingUpTimings.scar")
import("ObserverUI/Tracking_RelicLocations.scar")
import("ObserverUI/Tracking_PopulationComposition.scar")
import("ObserverUI/Tracking_OwnedSquads.scar")
import("ObserverUI/Tracking_QueuedStuff.scar")
import("ObserverUI/Tracking_SquadLosses.scar")
import("ObserverUI/Tracking_PopulationCapped.scar")

import("ObserverUI/UiDataContext/Initialize_NumberOfPlayers.scar")
import("ObserverUI/UiDataContext/Initialize_ObserverUIDataContextMappings.scar")
import("ObserverUI/UiDataContext/ObserverUiDataContext.scar")
import("ObserverUI/UiDataContext/UpdateUi_Messages.scar")
import("ObserverUI/UiDataContext/UpdateUi_SquadLosses.scar")
import("ObserverUI/UiDataContext/UpdateUi_VictoryCountdowns.scar")
import("ObserverUI/UiDataContext/UpdateUi_PopulationCapped.scar")
import("ObserverUI/UiDataContext/UpdateUi_TeamSummary.scar")
import("ObserverUI/UiDataContext/UpdateUi_LandmarkVictory.scar")

import("ObserverUI/xaml/ObserveNPlayers.scar")
import("ObserverUI/xaml/Observe2Players.scar")
import("ObserverUI/xaml/TeamVTeam.scar")
import("ObserverUI/xaml/ToggleUIButton.scar")
import("ObserverUI/xaml/SwapPlayers1v1Button.scar")
import("ObserverUI/xaml/SymmetryButton.scar")
import("ObserverUI/xaml/HideMessagesButton.scar")
import("ObserverUI/xaml/HideArmyButton.scar")

import("ObserverUI/ObserverUIUpdateUi.scar")

Core_RegisterModule("ObserverUI")

function ObserverUI_OnInit()
	if not UI_IsReplay() then
		return
	end
	
	local observeXaml = _ObserveNPlayersXaml
	if World_GetPlayerCount() == 2 then
		observeXaml = _Observe2PlayersXaml
		
		UI_AddChild("ScarDefault", "XamlPresenter", "SwapPlayers1v1Button", { IsHitTestVisible = true, Xaml = _SwapPlayers1v1ButtonXaml, DataContext = UI_CreateDataContext(_SwapPlayers1v1ButtonDataContext)})
		UI_AddChild("ScarDefault", "XamlPresenter", "SymmetryButton", { IsHitTestVisible = true, Xaml = _SymmetryButtonXaml, DataContext = UI_CreateDataContext(_SymmetryButtonDataContext)})
	elseif #TEAMS == 2 then
		UI_AddChild("ScarDefault", "XamlPresenter", "SwapPlayers1v1Button", { IsHitTestVisible = true, Xaml = _SwapPlayers1v1ButtonXaml, DataContext = UI_CreateDataContext(_SwapPlayers1v1ButtonDataContext)})
		UI_AddChild("ScarDefault", "XamlPresenter", "HideMessagesButton", { IsHitTestVisible = true, Xaml = XamlHideMessagesButton, DataContext = UI_CreateDataContext(_HideMessagesButtonDataContext)})
		UI_AddChild("ScarDefault", "XamlPresenter", "HideArmyButton", { IsHitTestVisible = true, Xaml = XamlHideArmyButton, DataContext = UI_CreateDataContext(_HideArmyButtonDataContext)})
		observeXaml = XamlTeamVTeam
	end
	
	UI_AddChild("ScarDefault", "XamlPresenter", "ToggleUIButton", { IsHitTestVisible = true, Xaml = _ToggleUIButtonXaml, DataContext = UI_CreateDataContext(_ToggleUIButtonDataContext)})
	UI_AddChild("ScarDefault", "XamlPresenter", "ObserverUI", { IsHitTestVisible = true, Xaml = observeXaml})
	
	Set_ReplayStatViewer_And_ImprovedUI_Visibility(true)
end

_SwapPlayers1v1ButtonDataContext = { 
	command = UI_CreateCommand("SwapPlayers1v1")
}

_SymmetryButtonDataContext = { 
	command = UI_CreateCommand("ToggleSymmetricalUi")
}

_ToggleUIButtonDataContext = { 
	command = UI_CreateCommand("SwitchBetween_ReplayStatViewer_And_ImprovedUI")
}

_HideMessagesButtonDataContext = { 
	command = UI_CreateCommand("ToggleMessages")
}

_HideArmyButtonDataContext = { 
	command = UI_CreateCommand("ToggleArmy")
}

_IsImprovedUIVisible = true

function SwitchBetween_ReplayStatViewer_And_ImprovedUI()
	Set_ReplayStatViewer_And_ImprovedUI_Visibility(not _IsImprovedUIVisible)
end

function Set_ReplayStatViewer_And_ImprovedUI_Visibility(improvedUIIsVisible)
	_IsImprovedUIVisible = improvedUIIsVisible
	
	if improvedUIIsVisible then
		ShowImprovedUI()
		return
	end
	ShowClassicUI()
end

function ShowImprovedUI()
	InitializeObserverUIDataContext()

	ObserverUiInitialization:Reset()
	ObserverUiRuleSystem:AddUpdateUiDataContextRule(UpdateObserverUIDataContext)
	ObserverUiRuleSystem:AddApplyUiDataContextRule(function () UI_SetDataContext("ObserverUI", _ObserverUIDataContext) end)
	ObserverUiInitialization:Initialize()
	
	PrepareObserverUIDataContextFor1v1()
	
	UI_SetPropertyValue("ObserverUI", "Visibility", "Visible")
	UI_SetPropertyValue("uniqueSquadsPanel", "Visibility", "Collapsed")
	UI_SetPropertyValue("HideMessagesButton", "Visibility", "Visible")
	UI_SetPropertyValue("HideArmyButton", "Visibility", "Visible")
	UI_SetPropertyValue("SwapPlayers1v1Button", "Visibility", "Visible")
	
	if #TEAMS ~= 2 then
		UI_SetPropertyValue("ReplayControl", "Margin", "0,125,0,0")
		UI_SetPropertyValue("LandmarkInConstruction", "Visibility", "Hidden")
    	UI_SetPropertyValue("LandmarkInConstruction", "Height", "60")
		UI_SetPropertyValue("DynastyUI", "Visibility", "Collapsed")
		UI_SetPropertyValue("ReplayStatViewer", "Visibility", "Collapsed")
		UI_SetPropertyValue("selectionCommandCardsGrid", "Margin", "-205,0,0,0")
		return
	end
	
	if World_GetPlayerCount() ~= 2 then
		UI_SetPropertyValue("LandmarkInConstruction", "Visibility", "Collapsed")
		return
	end
		
	UI_SetPropertyValue("SymmetryButton", "Visibility", "Visible")
	UI_SetPropertyValue("DynastyUI", "Visibility", "Collapsed")
	UI_SetPropertyValue("ReplayStatViewer", "Visibility", "Collapsed")
	UI_SetPropertyValue("selectionCommandCardsGrid", "Margin", "-205,0,0,0")
end

function ShowClassicUI()
	ObserverUiInitialization:Stop()
	
	UI_SetPropertyValue("ObserverUI", "Visibility", "Collapsed")
	UI_SetPropertyValue("uniqueSquadsPanel", "Visibility", "Visible")
	UI_SetPropertyValue("HideMessagesButton", "Visibility", "Collapsed")
	UI_SetPropertyValue("HideArmyButton", "Visibility", "Collapsed")
	UI_SetPropertyValue("SwapPlayers1v1Button", "Visibility", "Collapsed")
	
	if #TEAMS ~= 2 then
		UI_SetPropertyValue("ReplayControl", "Margin", "0,0,0,0")
		UI_SetPropertyValue("LandmarkInConstruction", "Visibility", "Visible")
		UI_SetPropertyValue("DynastyUI", "Visibility", "Visible")
		UI_SetPropertyValue("ReplayStatViewer", "Visibility", "Visible")
		UI_SetPropertyValue("ReplayControl", "Margin", "0,0,0,0")
		return
	end
	
	if World_GetPlayerCount() ~= 2 then
		UI_SetPropertyValue("LandmarkInConstruction", "Visibility", "Visible")
		return
	end
	
	UI_SetPropertyValue("SymmetryButton", "Visibility", "Collapsed")
	UI_SetPropertyValue("DynastyUI", "Visibility", "Visible")
	UI_SetPropertyValue("ReplayStatViewer", "Visibility", "Visible")
	UI_SetPropertyValue("ReplayControl", "Margin", "0,0,0,0")
end

